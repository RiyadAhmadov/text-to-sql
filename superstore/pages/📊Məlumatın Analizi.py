import streamlit as st
import plotly.graph_objects as go
import pandas as pd
import plotly.express as px


df = pd.read_excel('walmart.xlsx')

st.sidebar.title("Filtrl…ôr")

df['timestamp'] = pd.to_datetime(df['timestamp'])
df['timestamp'] = df['timestamp'].dt.date
df['discount'] = df['discount'].astype('float')

price_min, price_max = int(df['final_price'].min()), int(df['final_price'].max())
price_filter = st.sidebar.slider("Qiym…ôt (‚Çº)", min_value=price_min, max_value=price_max, value=(price_min, price_max), format="‚Çº%d")

date_min, date_max = df['timestamp'].min(), df['timestamp'].max()
date_filter = st.sidebar.slider(
    "Tarix Aralƒ±ƒüƒ±",
    min_value=date_min,
    max_value=date_max,
    value=(date_min, date_max),
)

available_for_delivery = st.sidebar.multiselect('√áatdƒ±rƒ±lma', options=['B…ôli', 'Xeyr'], default=['B…ôli', 'Xeyr'])
available_for_pickup = st.sidebar.multiselect('Da≈üƒ±nma', options=['B…ôli', 'Xeyr'], default=['B…ôli', 'Xeyr'])
is_returnable = st.sidebar.multiselect('D√∂n…ô bil…ôn', options=['B…ôli', 'Xeyr'], default=['B…ôli', 'Xeyr'])

discount_min, discount_max = int(df['discount'].min()), int(df['discount'].max())
discount_filter = st.sidebar.slider("Endirim (‚Çº)", min_value=discount_min, max_value=discount_max, value=(discount_min, discount_max), format="‚Çº%d")

free_returns_filter = st.sidebar.multiselect('Pulsuz Geri Qaytarma', options=['Free 90-day returns', 'Devoluciones sin costo en 30 d√≠as',
       'Devoluciones sin costo en 90 d√≠as', 'Free 30-day returns',
       'Free 45-day returns', 'Not Returnable', 'Return policy'], default=['Free 90-day returns', 'Devoluciones sin costo en 30 d√≠as',
       'Devoluciones sin costo en 90 d√≠as', 'Free 30-day returns',
       'Free 45-day returns', 'Not Returnable', 'Return policy'])

rating_min, rating_max = float(df['rating'].min()), float(df['rating'].max())
rating_filter = st.sidebar.slider("Qiym…ôtl…ôndirm…ô", min_value=rating_min, max_value=rating_max, value=(rating_min, rating_max), format="%.1f")

filtered_df = df[
    (df['final_price'] >= price_filter[0]) & (df['final_price'] <= price_filter[1]) &
    (df['timestamp'] >= date_filter[0]) & (df['timestamp'] <= date_filter[1]) &
    (df['available_for_delivery'].isin(available_for_delivery)) &
    (df['available_for_pickup'].isin(available_for_pickup)) &
    (df['is_returnable'].isin(is_returnable)) &
    (df['discount'] >= discount_filter[0]) & (df['discount'] <= discount_filter[1]) &
    (df['free_returns'].isin(free_returns_filter)) &
    (df['rating'] >= rating_filter[0]) & (df['rating'] <= rating_filter[1])
]


st.title("üè™ Walmart satƒ±≈ülarƒ±")

# Ortalama satƒ±≈üƒ±n hesablanmasƒ±
average_sales = f"‚Çº{df.groupby(by=['timestamp'])['final_price'].mean().mean():,.2f}"
average_review_count = df.groupby(by=['timestamp'])['review_count'].mean().mean().round(0)
product_count = df['product_id'].nunique()

# Metrik kart funksiyasƒ±
def metric_card(label, value):
    st.markdown(
        f"""
        <div style="text-align: center; padding: 10px; border: 1px solid #ddd; border-radius: 10px; background-color:rgb(2, 13, 24);">
            <p style="font-size: 18px; color:rgb(153, 206, 250); font-weight: bold; margin: 0;">{label}</p>
            <p style="font-size: 24px; color:rgb(255, 223, 223); margin: 0;">{value}</p>
        </div>
        """,
        unsafe_allow_html=True,
    )

# 3 s√ºtunlu g√∂st…ôricil…ôr
col1, col2, col3 = st.columns(3)

with col1:
    metric_card("Ortalama Satƒ±≈ü", average_sales)

with col2:
    metric_card("Ortalama R…ôy Sayƒ±", average_review_count)

with col3:
    metric_card("M…ôhsul Sayƒ±", product_count)


# M…ôlumatlarƒ±n √ßevrilm…ôsi
df["final_price"] = df["final_price"].astype(float)
df["initial_price"] = df["initial_price"].astype(float)
df["discount"] = df["discount"].astype(float)
df["rating"] = df["rating"].astype(float)

# √áatdƒ±rƒ±lma v…ô da≈üƒ±nma s√ºtunlarƒ±nƒ± √ßevirm…ôk
df["available_for_delivery"] = df["available_for_delivery"].map({"B…ôli": 1, "Xeyr": 0})
df["available_for_pickup"] = df["available_for_pickup"].map({"B…ôli": 1, "Xeyr": 0})


# --- Brendl…ôr √úzr…ô Analiz ---
st.header('üìå Brendl…ôr √úzr…ô Analiz')

# Brendl…ôr √ºzr…ô √ßatdƒ±rƒ±lma sayƒ±
st.subheader('üöö Brendl…ôr √ºzr…ô √ßatdƒ±rƒ±lma sayƒ±:')
df_delivery = df.groupby("brand")["available_for_delivery"].sum().reset_index().nlargest(10, "available_for_delivery")
fig_delivery = px.bar(df_delivery, x="brand", y="available_for_delivery", labels={"brand":"Brendl…ôr","available_for_delivery": "√áatdƒ±rƒ±lma sayƒ±"})
st.plotly_chart(fig_delivery)

st.write('>Qrafikd…ô brendl…ôr √ºzr…ô √ßatdƒ±rƒ±lma sayƒ± g√∂st…ôrilib. G√∂r√ºnd√ºy√º kimi "Jeenmata" v…ô "Coffeemate" √ºzr…ô √ßatdƒ±rƒ±lma sayƒ± dig…ôrl…ôrin…ô nisb…ôtd…ô √ßoxdur.')

# Brendl…ôr √ºzr…ô da≈üƒ±nma sayƒ±
st.subheader('üì¶ Brendl…ôr √ºzr…ô da≈üƒ±nma sayƒ±:')
df_pickup = df.groupby("brand")["available_for_pickup"].sum().reset_index().nlargest(10, "available_for_pickup")
fig_pickup = px.bar(df_pickup, x="brand", y="available_for_pickup",  labels={"brand":"Brendl…ôr","available_for_pickup": "Da≈üƒ±nma sayƒ±"})
st.plotly_chart(fig_pickup)

st.write('>Qrafikd…ô brendl…ôr √ºzr…ô da≈üƒ±nma sayƒ± g√∂st…ôrilib. Burda is…ô birinci yeri "Great Value" brendi ikinci yeri is…ô "Coffeemate" brendi tutub v…ô burda da say dig…ôrl…ôrin…ô nisb…ôtd…ô √ßoxdur.')

# Brendl…ôr √ºzr…ô ortalama qiym…ôt
st.subheader('üí∞ Brendl…ôr √ºzr…ô ortalama qiym…ôt:')
df_avg_price = df.groupby("brand")["final_price"].mean().reset_index().nlargest(10, "final_price")
fig_avg_price = px.bar(df_avg_price, x="brand", y="final_price",  labels={"brand":"Brendl…ôr","final_price": "Ortalama Qiym…ôt"})
st.plotly_chart(fig_avg_price)

st.write('>Qrafikd…ô brendl…ôr √ºzr…ô ortalama qiym…ôtin daƒüƒ±lƒ±mƒ± g√∂st…ôrilib. Burda is…ô birinci yeri da≈üƒ±nma sayƒ±nda olduƒüu kimi "Great Value" brendi tutub.')

# Brendl…ôr √ºzr…ô ortalama endirim m…ôbl…ôƒüi
st.subheader('üéØ Brendl…ôr √ºzr…ô ortalama endirim m…ôbl…ôƒüi:')
df_avg_discount = df.groupby("brand")["discount"].mean().reset_index().nlargest(10, "discount")
fig_avg_discount = px.bar(df_avg_discount, x="brand", y="discount",  labels={"brand":"Brendl…ôr","discount": "Ortalama Endirim M…ôbl…ôƒüi"})
st.plotly_chart(fig_avg_discount)

st.write('>Qrafikd…ô brendl…ôr √ºzr…ô ortalama endirim m…ôbl…ôƒüi g√∂st…ôrilib. ∆èn √ßox endirim edil…ôn m…ôhsul "Naclud" m…ôhsuludur, amma bu tam analiz deyil. ∆èg…ôr m…ôhsul bahalƒ±dƒ±rsa o zaman edil…ôn endirim miqdarƒ± da √ßox olacaq. Buna g√∂r…ô faiz nisb…ôti il…ô baxmaq daha doƒüru olar.')

# Brendl…ôr √ºzr…ô ortalam rating
st.subheader('‚≠ê Brendl…ôr √ºzr…ô ortalam rating:')
df_avg_rating = df.groupby("brand")["rating"].mean().reset_index().nlargest(10, "rating")
fig_avg_rating = px.bar(df_avg_rating, x="brand", y="rating",  labels={"brand":"Brendl…ôr","rating": "Ortalama Rating"})
st.plotly_chart(fig_avg_rating)

st.write('>Qrafikd…ô brendl…ôr √ºzr…ô ortalama ratinq skoru g√∂st…ôrilib. ∆èn √ßox ratinq skoru "Bellucci" brendind…ôddir.')

# --- Kateqoriyalar √úzr…ô Analiz ---
st.header('üìå Kateqoriyalar √úzr…ô Analiz')

# Kateqoriyalar √ºzr…ô √ßatdƒ±rƒ±lma sayƒ±
st.subheader('üöõ Kateqoriyalar √ºzr…ô √ßatdƒ±rƒ±lma sayƒ±:')
fig_category_delivery = px.bar(df.groupby("category_name")["available_for_delivery"].sum().reset_index().nlargest(10, "available_for_delivery"),
                               x="category_name", y="available_for_delivery", 
                               labels={"category_name":"Kateqoriyalar","available_for_delivery": "√áatdƒ±rƒ±lma sayƒ±"})
st.plotly_chart(fig_category_delivery)

st.write('>Qrafikd…ô kateqoriyalar √ºzr…ô √ßatdƒ±rƒ±lma sayƒ± g√∂st…ôrilib. G√∂r√ºnd√ºy√º kimi "Olive Oils" v…ô "Bridal Rings Sets" kateqoriyalarƒ± √ºzr…ô √ßatdƒ±rƒ±lma sayƒ± dig…ôrl…ôrin…ô nisb…ôtd…ô √ßoxdur.')

# Kateqoriyalar √ºzr…ô da≈üƒ±nma sayƒ±
st.subheader('üì¶ Kateqoriyalar √ºzr…ô da≈üƒ±nma sayƒ±:')
fig_category_pickup = px.bar(df.groupby("category_name")["available_for_pickup"].sum().reset_index().nlargest(10, "available_for_pickup"),
                             x="category_name", y="available_for_pickup", 
                             labels={"category_name":"Kateqoriyalar", "available_for_pickup": "Da≈üƒ±nma sayƒ±"})
st.plotly_chart(fig_category_pickup)

st.write('>Qrafikd…ô kateqoriyalar √ºzr…ô da≈üƒ±nma sayƒ± g√∂st…ôrilib. Burda da birinci yeri "Olive Oils" kateqoriyasƒ± tutub v…ô say dig…ôrl…ôrin…ô nisb…ôtd…ô √ßoxdur.')

# Kateqoriyalar √ºzr…ô ortalama qiym…ôt
st.subheader('üíµ Kateqoriyalar √ºzr…ô ortalama qiym…ôt:')
fig_category_price = px.bar(df.groupby("category_name")["final_price"].mean().reset_index().nlargest(10, "final_price"),
                            x="category_name", y="final_price", 
                            labels={"category_name":"Kateqoriyalar", "final_price": "Ortalama Qiym…ôt"})
st.plotly_chart(fig_category_price)

st.write('>Qrafikd…ô kateqoriyalar √ºzr…ô ortalama qiym…ôtin daƒüƒ±lƒ±mƒ± g√∂st…ôrilib. Burda is…ô "Cordless Electric Lawn Mowers" tutub.')

# Brendl…ôr √ºzr…ô ortalama endirim m…ôbl…ôƒüi
st.subheader('üéØ Kateqoriyalar √ºzr…ô ortalama endirim m…ôbl…ôƒüi:')
fig_avg_discount = px.bar(df.groupby("category_name")["discount"].mean().reset_index().nlargest(10, "discount"),
                          x="category_name", y="discount", 
                          labels={"category_name":"Kateqoriyalar", "discount": "Ortalama Endirim M…ôbl…ôƒüi"})
st.plotly_chart(fig_avg_discount)

st.write('>Qrafikd…ô kateqoriyalar √ºzr…ô ortalama endirim m…ôbl…ôƒüi g√∂st…ôrilib. ∆èn √ßox endirim edil…ôn m…ôhsul "All desctop computers" m…ôhsuludur.')

# Brendl…ôr √ºzr…ô ortalam rating
st.subheader('‚≠ê Kateqoriyalar √ºzr…ô ortalam rating:')
fig_avg_rating = px.bar(df.groupby("category_name")["rating"].mean().reset_index().nlargest(10, "rating"),
                        x="category_name", y="rating", 
                        labels={"category_name":"Kateqoriyalar", "rating": "Ortalama Rating"})
st.plotly_chart(fig_avg_rating)

st.write('>Qrafikd…ô kateqoriyalar √ºzr…ô ortalama ratinq skoru g√∂st…ôrilib. ∆èn √ßox ratinq skoru "Chocolate Powders" kateqoriyasƒ±ndadƒ±r.')


# --- Satƒ±cƒ±lar √úzr…ô Analiz ---
st.header('üìå Satƒ±cƒ±lar √úzr…ô Analiz')

# Satƒ±cƒ±lar √ºzr…ô sifari≈ü sayƒ±
st.subheader('üìä Satƒ±cƒ±lar √ºzr…ô sifari≈ü sayƒ±:')
fig_seller_orders = px.bar(df.groupby("seller")["product_id"].count().reset_index().nlargest(10, "product_id"),
                           x="seller", y="product_id", 
                           labels={"seller": "Satƒ±cƒ±lar","product_id": "Sifari≈ü Sayƒ±"})
st.plotly_chart(fig_seller_orders)

st.write('>Qrafikd…ô satƒ±cƒ±lar √ºzr…ô toplam sifari≈ü sayƒ± g√∂st…ôrilib.')

# Satƒ±cƒ±lar √ºzr…ô toplam m…ôbl…ôƒü
st.subheader('üí∞ Satƒ±cƒ±lar √ºzr…ô toplam m…ôbl…ôƒü:')
fig_seller_total = px.bar(df.groupby("seller")["final_price"].sum().reset_index().nlargest(10, "final_price"),
                          x="seller", y="final_price", 
                          labels={"seller": "Satƒ±cƒ±lar", "final_price": "Toplam M…ôbl…ôƒü"})
st.plotly_chart(fig_seller_total)

st.write('>Burda is…ô satƒ±cƒ±lar √ºzr…ô sifari≈ül…ôrd…ô √∂d…ônil…ôn toplam m…ôbl…ôƒü g√∂st…ôrilib.')

# Satƒ±cƒ±lar √ºzr…ô ortalam rating
st.subheader('‚≠ê Satƒ±cƒ±lar √ºzr…ô ortalama rating:')
fig_avg_rating = px.bar(df.groupby("seller")["rating"].mean().reset_index().nlargest(10, "rating"),
                        x="seller", y="rating", 
                        labels={"seller": "Satƒ±cƒ±lar", "rating": "Ortalama Rating"})
st.plotly_chart(fig_avg_rating)

st.write('>Burda is…ô satƒ±cƒ±lar √ºzr…ô veril…ôn ratinql…ôr g√∂st…ôrilib.')

# --- √áatdƒ±rƒ±lma M√ºdd…ôti √úzr…ô Analiz ---
st.header('üìå Pulsuz Geri Qaytarma M√ºdd…ôti √úzr…ô Analiz')

# √áatdƒ±rƒ±lma m√ºdd…ôti √ºzr…ô sifari≈ü sayƒ±
st.subheader('üõçÔ∏è Pulsuz Geri Qaytarma √ºzr…ô sifari≈ü sayƒ±:')
fig_free_returns_count = px.bar(df.groupby("free_returns")["product_id"].count().reset_index().nlargest(10, "product_id"),
                                x="free_returns", y="product_id", 
                                labels={"free_returns":"Pulsuz Geri Qaytarma M√ºdd…ôti","product_id": "Sifari≈ü Sayƒ±"})
st.plotly_chart(fig_free_returns_count)

st.write('>Geri qaytarƒ±lma tarixi √ºzr…ô sifari≈ü sayƒ± g√∂st…ôrilib. Burda t…ôbii ki insanlarƒ±n hansƒ± m…ôhsula daha √ßox √∂n…ôm verdiyi ara≈üdƒ±rmaq √º√ß√ºn faiz payƒ± tapƒ±lmalƒ±dƒ±r. B…ôlk…ô 90% m…ôhsula "Free 90-day returns" t…ôklifi verilir?')

# √áatdƒ±rƒ±lma m√ºdd…ôti √ºzr…ô ortalama ratinq
st.subheader('‚≠ê Pulsuz Geri Qaytarma √ºzr…ô ortalama ratinq:')
fig_free_returns_rating = px.bar(df.groupby("free_returns")["rating"].mean().reset_index().nlargest(10, "rating"),
                                 x="free_returns", y="rating", 
                                 labels={"free_returns":"Pulsuz Geri Qaytarma M√ºdd…ôti", "rating": "Ortalama Ratinq"})
st.plotly_chart(fig_free_returns_rating)

st.write('>Son olaraq is…ô, geri qaytarƒ±lma tarixi √ºzr…ô ortalama ratinq g√∂st…ôrilib. ∆èslind…ô insanlar qaytarƒ±lma tarixi y√ºks…ôk olan m…ôhsullardan yaxud xidm…ôtl…ôr razƒ± qala bil…ôr. Amma m…ôlumat deyir ki, burda …ôlaq…ô o q…ôd…ôr d…ô g√ºcl√º deyil. Y…ôni ola bil…ôr ki pis m…ôhsul olsun amma free return olsun bu zaman bel…ô alƒ±cƒ±lar narazƒ± qala bilirl…ôr.')


# Footer
st.markdown(
    """
    ---
    <div style="text-align: center;">
        <p><strong>Produced by Riyad Ahmadov</strong></p>
        <p>
            <a href="https://github.com/riyadahmadov" target="_blank">GitHub</a> |
            <a href="https://www.linkedin.com/in/riyadahmadov/" target="_blank">LinkedIn</a>
        </p>
    </div>
    """,
    unsafe_allow_html=True
)

# ‚úÖDone
